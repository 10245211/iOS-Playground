// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSAttributedString (SWIFT_EXTENSION(SwifterSwift))
@end

@class UIColor;

@interface NSAttributedString (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Add color to NSAttributedString.
  \param color text color.


  returns:
  a NSAttributedString colored with given color.
*/
- (NSAttributedString * _Nonnull)coloredWith:(UIColor * _Nonnull)color;
@end


@interface NSAttributedString (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Underlined string.
*/
@property (nonatomic, readonly, strong) NSAttributedString * _Nonnull underlined;
/**
  SwifterSwift: Struckthrough string.
*/
@property (nonatomic, readonly, strong) NSAttributedString * _Nonnull struckthrough;
@end


@interface UIColor (SWIFT_EXTENSION(SwifterSwift))
@end


@interface UIColor (SWIFT_EXTENSION(SwifterSwift))
@end


@interface UIColor (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Blend two UIColors
  \param color1 first color to blend

  \param intensity1 intensity of first color (default is 0.5)

  \param color2 second color to blend

  \param intensity2 intensity of second color (default is 0.5)


  returns:
  UIColor created by blending first and seond colors.
*/
+ (UIColor * _Nonnull)blend:(UIColor * _Nonnull)color1 intensity1:(CGFloat)intensity1 with:(UIColor * _Nonnull)color2 intensity2:(CGFloat)intensity2;
@end


@interface UIColor (SWIFT_EXTENSION(SwifterSwift))
@end


@interface UIColor (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Create UIColor from hexadecimal value with optional transparency.
  \param hex hex Int (example: 0xDECEB5).

  \param transparency optional transparency value (default is 1).

*/
- (nonnull instancetype)initWithHex:(NSInteger)hex transparency:(CGFloat)transparency;
/**
  SwifterSwift: Create UIColor from hexadecimal string with optional transparency (if applicable).
  \param hexString hexadecimal string (examples: EDE7F6, 0xEDE7F6, #EDE7F6, #0ff, 0xF0F, ..).

  \param transparency optional transparency value (default is 1).

*/
- (nullable instancetype)initWithHexString:(NSString * _Nonnull)hexString transparency:(CGFloat)transparency;
/**
  SwifterSwift: Create UIColor from RGB values with optional transparency.
  \param red red component.

  \param green green component.

  \param blue blue component.

  \param transparency optional transparency value (default is 1).

*/
- (nonnull instancetype)initWithRed:(NSInteger)red green:(NSInteger)green blue:(NSInteger)blue transparency:(CGFloat)transparency;
/**
  SwifterSwift: Create UIColor from a complementary of a UIColor (if applicable).
  \param color color of which opposite color is desired.

*/
- (nullable instancetype)initWithComplementaryFor:(UIColor * _Nonnull)color;
@end


@interface UIColor (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Red component of UIColor (read-only).
*/
@property (nonatomic, readonly) NSInteger redComponent;
/**
  SwifterSwift: Green component of UIColor (read-only).
*/
@property (nonatomic, readonly) NSInteger greenComponent;
/**
  SwifterSwift: blue component of UIColor (read-only).
*/
@property (nonatomic, readonly) NSInteger blueComponent;
/**
  SwifterSwift: Alpha of UIColor (read-only).
*/
@property (nonatomic, readonly) CGFloat alpha;
/**
  SwifterSwift: Hexadecimal value string (read-only).
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull hexString;
/**
  SwifterSwift: Short hexadecimal value string (read-only, if applicable).
*/
@property (nonatomic, readonly, copy) NSString * _Nullable shortHexString;
/**
  SwifterSwift: Short hexadecimal value string, or full hexadecimal string if not possible (read-only).
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull shortHexOrHexString;
/**
  SwifterSwift: Get color complementary (read-only, if applicable).
*/
@property (nonatomic, readonly, strong) UIColor * _Nullable complementary;
/**
  SwifterSwift: Random color.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull random;)
+ (UIColor * _Nonnull)random;
@end


@interface UIImage (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Create UIImage from color and size.
  \param color image fill color.

  \param size image size.

*/
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color size:(CGSize)size;
@end


@interface UIImage (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Compressed UIImage from original UIImage.
  \param quality The quality of the resulting JPEG image, expressed as a value from 0.0 to 1.0. The value 0.0 represents the maximum compression (or lowest quality) while the value 1.0 represents the least compression (or best quality), (default is 0.5).


  returns:
  optional UIImage (if applicable).
*/
- (UIImage * _Nullable)compressedWithQuality:(CGFloat)quality;
/**
  SwifterSwift: Compressed UIImage data from original UIImage.
  \param quality The quality of the resulting JPEG image, expressed as a value from 0.0 to 1.0. The value 0.0 represents the maximum compression (or lowest quality) while the value 1.0 represents the least compression (or best quality), (default is 0.5).


  returns:
  optional Data (if applicable).
*/
- (NSData * _Nullable)compressedDataWithQuality:(CGFloat)quality;
/**
  SwifterSwift: UIImage Cropped to CGRect.
  \param rect CGRect to crop UIImage to.


  returns:
  cropped UIImage
*/
- (UIImage * _Nonnull)croppedTo:(CGRect)rect;
/**
  SwifterSwift: UIImage filled with color
  \param color color to fill image with.


  returns:
  UIImage filled with given color.
*/
- (UIImage * _Nonnull)filledWithColor:(UIColor * _Nonnull)color;
@end


@interface UIImage (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Size in bytes of UIImage
*/
@property (nonatomic, readonly) NSInteger bytesSize;
/**
  SwifterSwift: Size in kilo bytes of UIImage
*/
@property (nonatomic, readonly) NSInteger kilobytesSize;
/**
  SwifterSwift: UIImage with .alwaysOriginal rendering mode.
*/
@property (nonatomic, readonly, strong) UIImage * _Nonnull original;
/**
  SwifterSwift: UIImage with .alwaysTemplate rendering mode.
*/
@property (nonatomic, readonly, strong, getter=template) UIImage * _Nonnull template_;
@end

#pragma clang diagnostic pop

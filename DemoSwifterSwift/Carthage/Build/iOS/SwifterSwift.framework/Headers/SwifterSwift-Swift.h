// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import UIKit;
@import ObjectiveC;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSAttributedString (SWIFT_EXTENSION(SwifterSwift))
@end

@class UIColor;

@interface NSAttributedString (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Add color to NSAttributedString.
  \param color text color.


  returns:
  a NSAttributedString colored with given color.
*/
- (NSAttributedString * _Nonnull)coloredWith:(UIColor * _Nonnull)color;
@end


@interface NSAttributedString (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Bolded string.
*/
@property (nonatomic, readonly, strong) NSAttributedString * _Nonnull bolded;
/**
  SwifterSwift: Underlined string.
*/
@property (nonatomic, readonly, strong) NSAttributedString * _Nonnull underlined;
/**
  SwifterSwift: Italicized string.
*/
@property (nonatomic, readonly, strong) NSAttributedString * _Nonnull italicized;
/**
  SwifterSwift: Struckthrough string.
*/
@property (nonatomic, readonly, strong) NSAttributedString * _Nonnull struckthrough;
@end


@interface UIAlertController (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Create new alert view controller with default OK action.
  \param title alert controller’s title.

  \param message alert controller’s message (default is nil).

  \param defaultActionButtonTitle default action button title (default is “OK”)

  \param tintColor alert controller’s tint color (default is nil)

*/
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title message:(NSString * _Nullable)message defaultActionButtonTitle:(NSString * _Nonnull)defaultActionButtonTitle tintColor:(UIColor * _Nullable)tintColor;
/**
  SwifterSwift: Create new error alert view controller from Error with default OK action.
  \param title alert controller’s title (default is “Error”).

  \param error error to set alert controller’s message to it’s localizedDescription.

  \param defaultActionButtonTitle default action button title (default is “OK”)

  \param tintColor alert controller’s tint color (default is nil)

*/
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title error:(NSError * _Nonnull)error defaultActionButtonTitle:(NSString * _Nonnull)defaultActionButtonTitle tintColor:(UIColor * _Nullable)tintColor;
@end

@class UIAlertAction;

@interface UIAlertController (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Present alert view controller in the current view controller.
  \param animated set true to animate presentation of alert controller (default is true).

  \param vibrate set true to vibrate the device while presenting the alert (default is false).

  \param completion an optional completion handler to be called after presenting alert controller (default is nil).

*/
- (void)showWithAnimated:(BOOL)animated vibrate:(BOOL)vibrate completion:(void (^ _Nullable)(void))completion;
/**
  SwifterSwift: Add an action to Alert
  \param title action title

  \param style action style (default is UIAlertActionStyle.default)

  \param isEnabled isEnabled status for action (default is true)

  \param handler optional action handler to be called when button is tapped (default is nil)


  returns:
  action created by this method
*/
- (UIAlertAction * _Nonnull)addActionWithTitle:(NSString * _Nonnull)title style:(UIAlertActionStyle)style isEnabled:(BOOL)isEnabled handler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler;
/**
  SwifterSwift: Add a text field to Alert
  \param text text field text (default is nil)

  \param placeholder text field placeholder text (default is nil)

  \param editingChangedTarget an optional target for text field’s editingChanged

  \param editingChangedSelector an optional selector for text field’s editingChanged

*/
- (void)addTextFieldWithText:(NSString * _Nullable)text placeholder:(NSString * _Nullable)placeholder editingChangedTarget:(id _Nullable)editingChangedTarget editingChangedSelector:(SEL _Nullable)editingChangedSelector;
@end


@interface UIBarButtonItem (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Add Target to UIBarButtonItem
  \param target target.

  \param action selector to run when button is tapped.

*/
- (void)addTargetForActionWithTarget:(id _Nonnull)target action:(SEL _Nonnull)action;
@end

@class UIImage;

@interface UIButton (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Set image for all states.
  \param image UIImage.

*/
- (void)setImageForAllStates:(UIImage * _Nonnull)image;
/**
  SwifterSwift: Set title color for all states.
  \param color UIColor.

*/
- (void)setTitleColorForAllStates:(UIColor * _Nonnull)color;
/**
  SwifterSwift: Set title for all states.
  \param title title string.

*/
- (void)setTitleForAllStates:(NSString * _Nonnull)title;
@end


@interface UIButton (SWIFT_EXTENSION(SwifterSwift))
@property (nonatomic, strong) UIImage * _Nullable imageForDisabled;
@property (nonatomic, strong) UIImage * _Nullable imageForHighlighted;
@property (nonatomic, strong) UIImage * _Nullable imageForNormal;
@property (nonatomic, strong) UIImage * _Nullable imageForSelected;
@property (nonatomic, strong) UIColor * _Nullable titleColorForDisabled;
@property (nonatomic, strong) UIColor * _Nullable titleColorForHighlighted;
@property (nonatomic, strong) UIColor * _Nullable titleColorForNormal;
@property (nonatomic, strong) UIColor * _Nullable titleColorForSelected;
@property (nonatomic, copy) NSString * _Nullable titleForDisabled;
@property (nonatomic, copy) NSString * _Nullable titleForHighlighted;
@property (nonatomic, copy) NSString * _Nullable titleForNormal;
@property (nonatomic, copy) NSString * _Nullable titleForSelected;
@end


@interface UICollectionView (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: IndexPath for last item in section.
  \param section section to get last item in.


  returns:
  optional last indexPath for last item in section (if applicable).
*/
- (NSIndexPath * _Nullable)indexPathForLastItemInSection:(NSInteger)section;
/**
  Reload data with a completion handler.
  \param completion completion handler to run after reloadData finishes.

*/
- (void)reloadData:(void (^ _Nonnull)(void))completion;
@end


@interface UICollectionView (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Index path of last item in collectionView.
*/
@property (nonatomic, readonly, copy) NSIndexPath * _Nullable indexPathForLastItem;
/**
  SwifterSwift: Index of last section in collectionView.
*/
@property (nonatomic, readonly) NSInteger lastSection;
/**
  SwifterSwift: Number of all items in all sections of collectionView.
*/
@property (nonatomic, readonly) NSInteger numberOfItems;
@end


@interface UIColor (SWIFT_EXTENSION(SwifterSwift))
@end


@interface UIColor (SWIFT_EXTENSION(SwifterSwift))
@end


@interface UIColor (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Blend two UIColors
  \param color1 first color to blend

  \param intensity1 intensity of first color (default is 0.5)

  \param color2 second color to blend

  \param intensity2 intensity of second color (default is 0.5)


  returns:
  UIColor created by blending first and seond colors.
*/
+ (UIColor * _Nonnull)blend:(UIColor * _Nonnull)color1 intensity1:(CGFloat)intensity1 with:(UIColor * _Nonnull)color2 intensity2:(CGFloat)intensity2;
@end


@interface UIColor (SWIFT_EXTENSION(SwifterSwift))
@end


@interface UIColor (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Create UIColor from hexadecimal value with optional transparency.
  \param hex hex Int (example: 0xDECEB5).

  \param transparency optional transparency value (default is 1).

*/
- (nonnull instancetype)initWithHex:(NSInteger)hex transparency:(CGFloat)transparency;
/**
  SwifterSwift: Create UIColor from hexadecimal string with optional transparency (if applicable).
  \param hexString hexadecimal string (examples: EDE7F6, 0xEDE7F6, #EDE7F6, #0ff, 0xF0F, ..).

  \param transparency optional transparency value (default is 1).

*/
- (nullable instancetype)initWithHexString:(NSString * _Nonnull)hexString transparency:(CGFloat)transparency;
/**
  SwifterSwift: Create UIColor from RGB values with optional transparency.
  \param red red component.

  \param green green component.

  \param blue blue component.

  \param transparency optional transparency value (default is 1).

*/
- (nonnull instancetype)initWithRed:(NSInteger)red green:(NSInteger)green blue:(NSInteger)blue transparency:(CGFloat)transparency;
/**
  SwifterSwift: Create UIColor from a complementary of a UIColor (if applicable).
  \param color color of which opposite color is desired.

*/
- (nullable instancetype)initWithComplementaryFor:(UIColor * _Nonnull)color;
@end


@interface UIColor (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Red component of UIColor (read-only).
*/
@property (nonatomic, readonly) NSInteger redComponent;
/**
  SwifterSwift: Green component of UIColor (read-only).
*/
@property (nonatomic, readonly) NSInteger greenComponent;
/**
  SwifterSwift: blue component of UIColor (read-only).
*/
@property (nonatomic, readonly) NSInteger blueComponent;
/**
  SwifterSwift: Alpha of UIColor (read-only).
*/
@property (nonatomic, readonly) CGFloat alpha;
/**
  SwifterSwift: Hexadecimal value string (read-only).
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull hexString;
/**
  SwifterSwift: Short hexadecimal value string (read-only, if applicable).
*/
@property (nonatomic, readonly, copy) NSString * _Nullable shortHexString;
/**
  SwifterSwift: Short hexadecimal value string, or full hexadecimal string if not possible (read-only).
*/
@property (nonatomic, readonly, copy) NSString * _Nonnull shortHexOrHexString;
/**
  SwifterSwift: Get color complementary (read-only, if applicable).
*/
@property (nonatomic, readonly, strong) UIColor * _Nullable complementary;
/**
  SwifterSwift: Random color.
*/
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull random;)
+ (UIColor * _Nonnull)random;
@end


@interface UIImage (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Create UIImage from color and size.
  \param color image fill color.

  \param size image size.

*/
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color size:(CGSize)size;
@end


@interface UIImage (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Compressed UIImage from original UIImage.
  \param quality The quality of the resulting JPEG image, expressed as a value from 0.0 to 1.0. The value 0.0 represents the maximum compression (or lowest quality) while the value 1.0 represents the least compression (or best quality), (default is 0.5).


  returns:
  optional UIImage (if applicable).
*/
- (UIImage * _Nullable)compressedWithQuality:(CGFloat)quality;
/**
  SwifterSwift: Compressed UIImage data from original UIImage.
  \param quality The quality of the resulting JPEG image, expressed as a value from 0.0 to 1.0. The value 0.0 represents the maximum compression (or lowest quality) while the value 1.0 represents the least compression (or best quality), (default is 0.5).


  returns:
  optional Data (if applicable).
*/
- (NSData * _Nullable)compressedDataWithQuality:(CGFloat)quality;
/**
  SwifterSwift: UIImage Cropped to CGRect.
  \param rect CGRect to crop UIImage to.


  returns:
  cropped UIImage
*/
- (UIImage * _Nonnull)croppedTo:(CGRect)rect;
/**
  SwifterSwift: UIImage filled with color
  \param color color to fill image with.


  returns:
  UIImage filled with given color.
*/
- (UIImage * _Nonnull)filledWithColor:(UIColor * _Nonnull)color;
@end


@interface UIImage (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Size in bytes of UIImage
*/
@property (nonatomic, readonly) NSInteger bytesSize;
/**
  SwifterSwift: Size in kilo bytes of UIImage
*/
@property (nonatomic, readonly) NSInteger kilobytesSize;
/**
  SwifterSwift: UIImage with .alwaysOriginal rendering mode.
*/
@property (nonatomic, readonly, strong) UIImage * _Nonnull original;
/**
  SwifterSwift: UIImage with .alwaysTemplate rendering mode.
*/
@property (nonatomic, readonly, strong, getter=template) UIImage * _Nonnull template_;
@end


@interface UIImageView (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Set image from a URL.
  \param url URL of image.

  \param contentMode imageView content mode (default is .scaleAspectFit).

  \param placeHolder optional placeholder image

  \param completionHandler optional completion handler to run when download finishs (default is nil).

*/
- (void)downloadFrom:(NSURL * _Nonnull)url contentMode:(UIViewContentMode)contentMode placeholder:(UIImage * _Nullable)placeholder completionHandler:(void (^ _Nullable)(UIImage * _Nullable, NSError * _Nullable))completionHandler;
@end


@interface UILabel (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Required height for a label
*/
@property (nonatomic, readonly) CGFloat requiredHeight;
@end

@class UIFont;

@interface UINavigationBar (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Set Navigation Bar title, title color and font.
  \param font title font

  \param color title text color (default is .black).

*/
- (void)setTitleFont:(UIFont * _Nonnull)font color:(UIColor * _Nonnull)color;
/**
  SwifterSwift: Make navigation bar transparent.
  \param withTint tint color (default is .white).

*/
- (void)makeTransparentWithTint:(UIColor * _Nonnull)withTint;
/**
  SwifterSwift: Set navigationBar background and text colors
  \param background backgound color

  \param text text color

*/
- (void)setColorsWithBackground:(UIColor * _Nonnull)background text:(UIColor * _Nonnull)text;
@end

@class UIViewController;

@interface UINavigationController (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Pop ViewController with completion handler.
  \param completion optional completion handler (default is nil).

*/
- (void)popViewControllerWithCompletion:(void (^ _Nullable)(void))completion;
/**
  SwifterSwift: Push ViewController with completion handler.
  \param viewController viewController to push.

  \param completion optional completion handler (default is nil).

*/
- (void)pushViewControllerWithViewController:(UIViewController * _Nonnull)viewController completion:(void (^ _Nullable)(void))completion;
/**
  SwifterSwift: Make navigation controller’s navigation bar transparent.
  \param withTint tint color (default is .white).

*/
- (void)makeTransparentWithTint:(UIColor * _Nonnull)withTint;
@end


@interface UINavigationItem (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Replace title label with an image in navigation item.
  \param image UIImage to replace title with.

*/
- (void)replaceTitleWith:(UIImage * _Nonnull)image;
@end


@interface UISearchBar (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Clear text.
*/
- (void)clear;
@end

@class UITextField;

@interface UISearchBar (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Text field inside search bar (if applicable).
*/
@property (nonatomic, readonly, strong) UITextField * _Nullable textField;
/**
  SwifterSwift: Text with no spaces or new lines in beginning and end (if applicable).
*/
@property (nonatomic, readonly, copy) NSString * _Nullable trimmedText;
@end


@interface UISegmentedControl (SWIFT_EXTENSION(SwifterSwift))
@end


@interface UISlider (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Set slide bar value with completion handler.
  \param value slider value.

  \param animated set true to animate value change (default is true).

  \param duration animation duration in seconds (default is 1 second).

  \param completion an optional completion handler to run after value is changed (default is nil)

*/
- (void)setValue:(float)value animated:(BOOL)animated duration:(NSTimeInterval)duration completion:(void (^ _Nullable)(void))completion;
@end


@interface UISwitch (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Toggle a UISwitch
  \param animated set true to animate the change (default is true)

*/
- (void)toggleWithAnimated:(BOOL)animated;
@end


@interface UITabBar (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Set tabBar colors.
  \param background background color.

  \param selectedBackground background color for selected tab.

  \param item icon tint color for items.

  \param selectedItem icon tint color for item.

*/
- (void)setColorsWithBackground:(UIColor * _Nullable)background selectedBackground:(UIColor * _Nullable)selectedBackground item:(UIColor * _Nullable)item selectedItem:(UIColor * _Nullable)selectedItem;
@end


@interface UITableView (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: IndexPath for last row in section.
  \param section section to get last row in.


  returns:
  optional last indexPath for last row in section (if applicable).
*/
- (NSIndexPath * _Nullable)indexPathForLastRowInSection:(NSInteger)section;
/**
  Reload data with a completion handler.
  \param completion completion handler to run after reloadData finishes.

*/
- (void)reloadData:(void (^ _Nonnull)(void))completion;
/**
  SwifterSwift: Remove TableFooterView.
*/
- (void)removeTableFooterView;
/**
  SwifterSwift: Remove TableHeaderView.
*/
- (void)removeTableHeaderView;
/**
  SwifterSwift: Scroll to bottom of TableView.
  \param animated set true to animate scroll (default is true).

*/
- (void)scrollToBottomWithAnimated:(BOOL)animated;
/**
  SwifterSwift: Scroll to top of TableView.
  \param animated set true to animate scroll (default is true).

*/
- (void)scrollToTopWithAnimated:(BOOL)animated;
@end


@interface UITableView (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Index path of last row in tableView.
*/
@property (nonatomic, readonly, copy) NSIndexPath * _Nullable indexPathForLastRow;
/**
  SwifterSwift: Index of last section in tableView.
*/
@property (nonatomic, readonly) NSInteger lastSection;
/**
  SwifterSwift: Number of all rows in all sections of tableView.
*/
@property (nonatomic, readonly) NSInteger numberOfRows;
@end


@interface UITextField (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Clear text.
*/
- (void)clear;
/**
  SwifterSwift: Set placeholder text color.
  \param color placeholder text color.

*/
- (void)setPlaceHolderTextColor:(UIColor * _Nonnull)color;
@end


@interface UITextField (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Check if text field is empty.
*/
@property (nonatomic, readonly) BOOL isEmpty;
/**
  SwifterSwift: Return text with no spaces or new lines in beginning and end.
*/
@property (nonatomic, readonly, copy) NSString * _Nullable trimmedText;
@property (nonatomic, strong) UIColor * _Nullable leftViewTintColor;
@property (nonatomic, strong) UIColor * _Nullable rightViewTintColor;
@end


@interface UITextView (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Clear text.
*/
- (void)clear;
/**
  SwifterSwift: Scroll to the bottom of text view
*/
- (void)scrollToBottom;
/**
  SwifterSwift: Scroll to the top of text view
*/
- (void)scrollToTop;
@end

@class NSBundle;
@class NSLayoutYAxisAnchor;
@class NSLayoutXAxisAnchor;
@class NSLayoutConstraint;

@interface UIView (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Set some or all corners radiuses of view.
  \param corners array of corners to change (example: [.bottomLeft, .topRight]).

  \param radius radius for selected corners.

*/
- (void)roundCorners:(UIRectCorner)corners radius:(CGFloat)radius;
/**
  SwifterSwift: Add shadow to view.
  \param color shadow color (default is #137992).

  \param radius shadow radius (default is 3).

  \param offset shadow offset (default is .zero).

  \param opacity shadow opacity (default is 0.5).

*/
- (void)addShadowOfColor:(UIColor * _Nonnull)color radius:(CGFloat)radius offset:(CGSize)offset opacity:(float)opacity;
/**
  SwifterSwift: Add array of subviews to view.
  \param subViews array of subviews to add to self.

*/
- (void)addWithSubViews:(NSArray<UIView *> * _Nonnull)subViews;
/**
  SwifterSwift: Fade in view.
  \param duration animation duration in seconds (default is 1 second).

  \param completion optional completion handler to run with animation finishes (default is nil)

*/
- (void)fadeInDuration:(NSTimeInterval)duration completion:(void (^ _Nullable)(BOOL))completion;
/**
  SwifterSwift: Fade out view.
  \param duration animation duration in seconds (default is 1 second).

  \param completion optional completion handler to run with animation finishes (default is nil)

*/
- (void)fadeOutWithDuration:(NSTimeInterval)duration completion:(void (^ _Nullable)(BOOL))completion;
/**
  SwifterSwift: Load view from nib.
  \param named nib name.

  \param bundle bundle of nib (default is nil).


  returns:
  optional UIView (if applicable).
*/
+ (UIView * _Nullable)loadFromNibWithNamed:(NSString * _Nonnull)named bundle:(NSBundle * _Nullable)bundle;
/**
  SwifterSwift: Remove all subviews in view.
*/
- (void)removeSubViews;
/**
  SwifterSwift: Remove all gesture recognizers from view.
*/
- (void)removeGestureRecognizers;
/**
  SwifterSwift: Scale view by offset.
  \param offset scale offset

  \param animated set true to animate scaling (default is false).

  \param duration animation duration in seconds (default is 1 second).

  \param completion optional completion handler to run with animation finishes (default is nil).

*/
- (void)scaleBy:(CGPoint)offset animated:(BOOL)animated duration:(NSTimeInterval)duration completion:(void (^ _Nullable)(BOOL))completion;
/**
  SwifterSwift: Anchor all sides of the view into it’s superview.
*/
- (void)fillToSuperview;
/**
  SwifterSwift: Add anchors from any side of the current view into the specified anchors and returns the newly added constraints.
  \param top current view’s top anchor will be anchored into the specified anchor

  \param left current view’s left anchor will be anchored into the specified anchor

  \param bottom current view’s bottom anchor will be anchored into the specified anchor

  \param right current view’s right anchor will be anchored into the specified anchor

  \param topConstant current view’s top anchor margin

  \param leftConstant current view’s left anchor margin

  \param bottomConstant current view’s bottom anchor margin

  \param rightConstant current view’s right anchor margin

  \param widthConstant current view’s width

  \param heightConstant current view’s height


  returns:
  array of newly added constraints (if applicable).
*/
- (NSArray<NSLayoutConstraint *> * _Nonnull)anchorWithTop:(NSLayoutYAxisAnchor * _Nullable)top left:(NSLayoutXAxisAnchor * _Nullable)left bottom:(NSLayoutYAxisAnchor * _Nullable)bottom right:(NSLayoutXAxisAnchor * _Nullable)right topConstant:(CGFloat)topConstant leftConstant:(CGFloat)leftConstant bottomConstant:(CGFloat)bottomConstant rightConstant:(CGFloat)rightConstant widthConstant:(CGFloat)widthConstant heightConstant:(CGFloat)heightConstant;
/**
  SwifterSwift: Anchor center X into current view’s superview with a constant margin value.
  \param withConstant constant of the anchor constraint.

*/
- (void)anchorCenterXToSuperviewWithConstant:(CGFloat)withConstant;
/**
  SwifterSwift: Anchor center Y into current view’s superview with a constant margin value.
  \param withConstant constant of the anchor constraint.

*/
- (void)anchorCenterYToSuperviewWithConstant:(CGFloat)constant;
/**
  SwifterSwift: Anchor center X and Y into current view’s superview
*/
- (void)anchorCenterSuperview;
@end


@interface UIView (SWIFT_EXTENSION(SwifterSwift))
@property (nonatomic, strong) UIColor * _Nullable borderColor;
@property (nonatomic) CGFloat borderWidth;
@property (nonatomic) CGFloat cornerRadius;
/**
  SwifterSwift: First responder.
*/
@property (nonatomic, readonly, strong) UIView * _Nullable firstResponder;
@property (nonatomic) CGFloat height;
/**
  SwifterSwift: Check if view is in RTL format.
*/
@property (nonatomic, readonly) BOOL isRightToLeft;
/**
  SwifterSwift: Take screenshot of view (if applicable).
*/
@property (nonatomic, readonly, strong) UIImage * _Nullable screenshot;
@property (nonatomic, strong) UIColor * _Nullable shadowColor;
@property (nonatomic) CGSize shadowOffset;
@property (nonatomic) float shadowOpacity;
@property (nonatomic) CGFloat shadowRadius;
/**
  SwifterSwift: Size of view.
*/
@property (nonatomic) CGSize size;
/**
  SwifterSwift: Get view’s parent view controller
*/
@property (nonatomic, readonly, strong) UIViewController * _Nullable parentViewController;
/**
  SwifterSwift: Width of view.
*/
@property (nonatomic) CGFloat width;
@end


@interface UIViewController (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Assign as listener to notification.
  \param name notification name.

  \param selector selector to run with notified.

*/
- (void)addNotificationObserverWithName:(NSNotificationName _Nonnull)name selector:(SEL _Nonnull)selector;
/**
  SwifterSwift: Unassign as listener to notification.
  \param name notification name.

*/
- (void)removeNotificationObserverWithName:(NSNotificationName _Nonnull)name;
/**
  SwifterSwift: Unassign as listener from all notifications.
*/
- (void)removeNotificationsObserver;
@end


@interface UIViewController (SWIFT_EXTENSION(SwifterSwift))
/**
  SwifterSwift: Check if ViewController is onscreen and not hidden.
*/
@property (nonatomic, readonly) BOOL isVisible;
/**
  SwifterSwift: NavigationBar in a ViewController.
*/
@property (nonatomic, readonly, strong) UINavigationBar * _Nullable navigationBar;
@end

#pragma clang diagnostic pop
